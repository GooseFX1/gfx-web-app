/* eslint-disable */
import { SuccessfulListingMsg, TransactionErrorMsg } from '../../components'
import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'
import { PublicKey } from '@solana/web3.js'
import BN from 'bn.js'

interface Message {
  type?: string
  message: string | JSX.Element
}

export type Faq = {
  question: string
  answer: string | JSX.Element
}

export type Pool = {
  index: number
  name: string
  desc: string
}

export type LiquidityAccount = {
  amountDeposited: BN
  createdAt: BN
  lastClaimed: BN
  lastObservedTap?: BN
  mint?: PublicKey
  owner?: PublicKey
  poolRegistry?: PublicKey
  space?: number[]
  totalEarned?: BN
}

export type SSLToken = {
  token: string
  name: string
  address: PublicKey
  assetType?: number
  bump?: number
  mathParams?: any
  mint?: PublicKey
  mintDecimals?: number
  oraclePriceHistories?: number[]
  pad0?: number[]
  pad1?: number[]
  space?: number[]
  status?: number
  totalAccumulatedLpReward?: BN
  totalLiquidityDeposits?: BN
}

export const poolType = {
  stable: {
    index: 3,
    name: 'Stable',
    desc: "If you're looking for more stable returns."
  },
  primary: {
    index: 1,
    name: 'Primary',
    desc: "If you're looking for medium to high returns."
  },
  hyper: {
    index: 2,
    name: 'Hyper',
    desc: "If you're looking for high returns with more risk"
  }
}

export const ADDRESSES: {
  [network in WalletAdapterNetwork]: SSLToken[]
} = {
  'mainnet-beta': [
    {
      token: 'USDT',
      name: 'USDT Coin',
      address: new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB')
    },
    {
      token: 'USDC',
      name: 'USDC coin',
      address: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v')
    },
    {
      token: 'SOL',
      name: 'Solana',
      address: new PublicKey('So11111111111111111111111111111111111111112')
    },
    {
      token: 'MSOL',
      name: 'MSOL',
      address: new PublicKey('mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So')
    },
    {
      token: 'BONK',
      name: 'BONK',
      address: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263')
    }
  ],
  devnet: [
    {
      token: 'USDT',
      name: 'USDT Coin',
      address: new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB')
    },
    {
      token: 'USDC',
      name: 'USDC coin',
      address: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v')
    },
    {
      token: 'SOL',
      name: 'Solana',
      address: new PublicKey('So11111111111111111111111111111111111111112')
    },
    {
      token: 'MSOL',
      name: 'MSOL',
      address: new PublicKey('mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So')
    },
    {
      token: 'BONK',
      name: 'BONK',
      address: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263')
    }
  ],
  testnet: [
    {
      token: 'USDT',
      name: 'USDT Coin',
      address: new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB')
    },
    {
      token: 'USDC',
      name: 'USDC coin',
      address: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v')
    },
    {
      token: 'SOL',
      name: 'Solana',
      address: new PublicKey('So11111111111111111111111111111111111111112')
    },
    {
      token: 'MSOL',
      name: 'MSOL',
      address: new PublicKey('mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So')
    },
    {
      token: 'BONK',
      name: 'BONK',
      address: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263')
    }
  ]
}

export const faqs = [
  {
    question: 'What is single-sided liquidity?',
    answer: (
      <div>
        Single-sided liquidity is a revolutionary AMM which allows you to deposit a single asset to earn
        auto-compounded yield. The yield is derived from the arbitrage profit from the spread between the quoted
        oracle and pool price and the swap fee.
      </div>
    )
  },
  {
    question: 'How is APY calculated?',
    answer: (
      <div>
        APY is calculated based on the fees generated by the liquidity pools and the liquidity provided by the
        liquidity providers (LPs). The APY provides an indication of the potential returns that LPs might earn over
        a year.
      </div>
    )
  },
  {
    question: 'What is the difference between stable, primary, and hyper pools?',
    answer: (
      <div>
        The distinction among stable, primary, and hyper pools lies in the types of assets they hold. Stable pools
        are composed of stablecoins, primary pools house prevalent ecosystem tokens, while hyper pools cater to
        more volatile assets.
      </div>
    )
  },
  {
    question: 'What are the risks?',
    answer: (
      <div>
        The risks associated with single-sided liquidity are price inventory risk which is common for any market
        maker. This risk occurs when the price of the assets used for market making decline in value in excess of
        the fees generated.
      </div>
    )
  },
  {
    question: 'How are LP fees distributed?',
    answer: <div>Fees and arbitrage profits are auto-compounded and are earned in the deposited asset.</div>
  }
]

export const ModeOfOperation = {
  DEPOSIT: 'Deposit',
  WITHDRAW: 'Withdraw'
}

export const insufficientSOLMsg = (): Message => ({
  type: 'error',
  message: 'You need minimum of 0.000001 SOL in your wallet to perform this transaction'
})

export const invalidDepositErrMsg = (tokenBalance: number, name: string): Message => ({
  type: 'error',
  message: `Please give valid input from 0.00001 to ${tokenBalance?.toFixed(3)} ${name}`
})

export const invalidWithdrawErrMsg = (tokenBalance: number, name: string): Message => ({
  type: 'error',
  message: `You can withdraw a maximum of ${tokenBalance?.toFixed(3)} ${name}`
})

export const invalidInputErrMsg = (name: string): Message => ({
  type: 'error',
  message: `Please give valid input greater than 0.00001 ${name}`
})

export const genericErrMsg = (error: string): Message => ({
  type: 'error',
  message: error
})

export const sslSuccessfulMessage = (
  signature: string,
  price: string | number,
  name: string,
  network: WalletAdapterNetwork,
  operation: string
): Message => ({
  message: (
    <SuccessfulListingMsg
      title={`${name} ${operation} sucessfull!`}
      itemName={`You ${operation} ${price} ${name}`}
      supportText={`Farm ${name}`}
      tx_url={`https://solscan.io/tx/${signature}?cluster=${network}`}
    />
  )
})

export const sslErrorMessage = (
  name: string,
  supportTxt: string,
  signature: string,
  network: WalletAdapterNetwork,
  operation: string
): Message => ({
  type: 'error',
  message: (
    <TransactionErrorMsg
      title={`${operation} error!`}
      itemName={`${operation} ${name} Error`}
      supportText={supportTxt}
      tx_url={signature ? `https://solscan.io/tx/${signature}?cluster=${network}` : null}
    />
  )
})

export const TOKEN_NAMES = {
  SOL: 'SOL',
  GOFX: 'GOFX',
  GMT: 'GMT',
  USDT: 'USDT',
  USDC: 'USDC'
}
