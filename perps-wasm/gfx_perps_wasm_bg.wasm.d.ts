/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_healthinfo_free(a: number): void;
export function __wbg_get_healthinfo_health(a: number): number;
export function __wbg_set_healthinfo_health(a: number, b: number): void;
export function __wbg_get_healthinfo_action(a: number): number;
export function __wbg_set_healthinfo_action(a: number, b: number): void;
export function risk_checks(a: number, b: number, c: number, d: number, e: number): void;
export function max_withdrawable(a: number, b: number, c: number, d: number, e: number): void;
export function get_funding_rate(a: number, b: number, c: number, d: number): void;
export function margin_available(a: number, b: number, c: number, d: number, e: number): void;
export function unrealised_pnl(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function get_liquidation_price(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function get_on_chain_price(a: number, b: number, c: number, d: number): void;
export function get_leverage_used(a: number, b: number, c: number, d: number, e: number): void;
export function get_leverage_available(a: number, b: number, c: number, d: number, e: number): void;
export function get_max_quantity(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function get_open_interests(a: number, b: number, c: number, d: number): void;
export function get_health(a: number, b: number, c: number, d: number, e: number): void;
export function get_volume(a: number, b: number, c: number): void;
export function get_portfolio_value(a: number, b: number, c: number, d: number, e: number): void;
export function find_max(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function find_min(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function find_l2_depth(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbgt_pass_0(a: number): void;
export function __wbg_matherror_free(a: number): void;
export function __wbg_fractional_free(a: number): void;
export function __wbg_get_fractional_m(a: number): number;
export function __wbg_set_fractional_m(a: number, b: number): void;
export function __wbg_get_fractional_exp(a: number): number;
export function __wbg_set_fractional_exp(a: number, b: number): void;
export function fractional_new(a: number, b: number): number;
export function fractional_from_str(a: number, b: number, c: number): void;
export function fractional_is_negative(a: number): number;
export function fractional_sign(a: number): number;
export function fractional_min(a: number, b: number): number;
export function fractional_max(a: number, b: number): number;
export function fractional_round_up(a: number, b: number, c: number): void;
export function fractional_checked_add(a: number, b: number, c: number): void;
export function fractional_checked_sub(a: number, b: number, c: number): void;
export function fractional_checked_mul(a: number, b: number, c: number): void;
export function fractional_checked_div(a: number, b: number, c: number): void;
export function fractional_round_unchecked(a: number, b: number, c: number): void;
export function fractional_abs(a: number): number;
export function __wbg_wasmbindgentestcontext_free(a: number): void;
export function wasmbindgentestcontext_new(): number;
export function wasmbindgentestcontext_args(a: number, b: number, c: number): void;
export function wasmbindgentestcontext_run(a: number, b: number, c: number): number;
export function __wbgtest_console_log(a: number): void;
export function __wbgtest_console_debug(a: number): void;
export function __wbgtest_console_info(a: number): void;
export function __wbgtest_console_warn(a: number): void;
export function __wbgtest_console_error(a: number): void;
export function __wbg_transaction_free(a: number): void;
export function transaction_constructor(a: number, b: number): number;
export function transaction_message(a: number): number;
export function transaction_messageData(a: number, b: number): void;
export function transaction_verify(a: number, b: number): void;
export function transaction_partialSign(a: number, b: number, c: number): void;
export function transaction_isSigned(a: number): number;
export function transaction_toBytes(a: number, b: number): void;
export function transaction_fromBytes(a: number, b: number, c: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_constructor(): number;
export function keypair_toBytes(a: number, b: number): void;
export function keypair_fromBytes(a: number, b: number, c: number): void;
export function keypair_pubkey(a: number): number;
export function __wbg_instructions_free(a: number): void;
export function instructions_constructor(): number;
export function instructions_push(a: number, b: number): void;
export function hash_constructor(a: number, b: number): void;
export function hash_toString(a: number, b: number): void;
export function hash_equals(a: number, b: number): number;
export function hash_toBytes(a: number, b: number): void;
export function __wbg_hash_free(a: number): void;
export function __wbg_pubkey_free(a: number): void;
export function systeminstruction_createAccount(a: number, b: number, c: number, d: number, e: number): number;
export function systeminstruction_createAccountWithSeed(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function systeminstruction_assign(a: number, b: number): number;
export function systeminstruction_assignWithSeed(a: number, b: number, c: number, d: number, e: number): number;
export function systeminstruction_transfer(a: number, b: number, c: number): number;
export function systeminstruction_transferWithSeed(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function systeminstruction_allocate(a: number, b: number): number;
export function systeminstruction_allocateWithSeed(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function systeminstruction_createNonceAccount(a: number, b: number, c: number, d: number): number;
export function systeminstruction_advanceNonceAccount(a: number, b: number): number;
export function systeminstruction_withdrawNonceAccount(a: number, b: number, c: number, d: number): number;
export function systeminstruction_authorizeNonceAccount(a: number, b: number, c: number): number;
export function __wbg_message_free(a: number): void;
export function __wbg_get_message_recent_blockhash(a: number): number;
export function __wbg_set_message_recent_blockhash(a: number, b: number): void;
export function pubkey_constructor(a: number, b: number): void;
export function pubkey_toString(a: number, b: number): void;
export function pubkey_isOnCurve(a: number): number;
export function pubkey_equals(a: number, b: number): number;
export function pubkey_toBytes(a: number, b: number): void;
export function pubkey_createWithSeed(a: number, b: number, c: number, d: number, e: number): void;
export function pubkey_createProgramAddress(a: number, b: number, c: number, d: number): void;
export function pubkey_findProgramAddress(a: number, b: number, c: number, d: number): void;
export function solana_program_init(): void;
export function __wbg_instruction_free(a: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h531de189d4431127(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function wasm_bindgen__convert__closures__invoke0_mut__h5099afc3f75fbbe5(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke3_mut__h129ead944ac25281(a: number, b: number, c: number, d: number, e: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h854abd88de8e9ee0(a: number, b: number, c: number, d: number): void;
